{
  "createdUTC": "2020-05-29T18:06:30.651Z",
  "definitionIsPublic": false,
  "definitionName": "DL-ATM41",
  "displayName": "DL-ATM41 Eleven Parameter Weather Station for LoRaWAN\u00ae",
  "manufacturer": "Decentlab",
  "organizationId": "9f014719-4add-4989-ba0f-fc7edc44d893",
  "parser": "\n/* https://www.decentlab.com/products/eleven-parameter-weather-station-for-lorawan */\n\nvar decentlab_decoder = {\n  PROTOCOL_VERSION: 2,\n  SENSORS: [\n    {length: 17,\n     values: [{name: \u0027solar_radiation\u0027,\n               displayName: \u0027Solar radiation\u0027,\n               convert: function (x) { return x[0] - 32768; },\n               unit: \u0027W\u22c5m\u207b\u00b2\u0027},\n              {name: \u0027precipitation\u0027,\n               displayName: \u0027Precipitation\u0027,\n               convert: function (x) { return (x[1] - 32768) / 1000; },\n               unit: \u0027mm\u0027},\n              {name: \u0027lightning_strike_count\u0027,\n               displayName: \u0027Lightning strike count\u0027,\n               convert: function (x) { return x[2] - 32768; }},\n              {name: \u0027lightning_average_distance\u0027,\n               displayName: \u0027Lightning average distance\u0027,\n               convert: function (x) { return x[3] - 32768; },\n               unit: \u0027km\u0027},\n              {name: \u0027wind_speed\u0027,\n               displayName: \u0027Wind speed\u0027,\n               convert: function (x) { return (x[4] - 32768) / 100; },\n               unit: \u0027m\u22c5s\u207b\u00b9\u0027},\n              {name: \u0027wind_direction\u0027,\n               displayName: \u0027Wind direction\u0027,\n               convert: function (x) { return (x[5] - 32768) / 10; },\n               unit: \u0027\u00b0\u0027},\n              {name: \u0027maximum_wind_speed\u0027,\n               displayName: \u0027Maximum wind speed\u0027,\n               convert: function (x) { return (x[6] - 32768) / 100; },\n               unit: \u0027m\u22c5s\u207b\u00b9\u0027},\n              {name: \u0027air_temperature\u0027,\n               displayName: \u0027Air temperature\u0027,\n               convert: function (x) { return (x[7] - 32768) / 10; },\n               unit: \u0027\u00b0C\u0027},\n              {name: \u0027vapor_pressure\u0027,\n               displayName: \u0027Vapor pressure\u0027,\n               convert: function (x) { return (x[8] - 32768) / 100; },\n               unit: \u0027kPa\u0027},\n              {name: \u0027atmospheric_pressure\u0027,\n               displayName: \u0027Atmospheric pressure\u0027,\n               convert: function (x) { return (x[9] - 32768) / 100; },\n               unit: \u0027kPa\u0027},\n              {name: \u0027relative_humidity\u0027,\n               displayName: \u0027Relative humidity\u0027,\n               convert: function (x) { return (x[10] - 32768) / 10; },\n               unit: \u0027%\u0027},\n              {name: \u0027sensor_temperature_internal\u0027,\n               displayName: \u0027Sensor temperature (internal)\u0027,\n               convert: function (x) { return (x[11] - 32768) / 10; },\n               unit: \u0027\u00b0C\u0027},\n              {name: \u0027x_orientation_angle\u0027,\n               displayName: \u0027X orientation angle\u0027,\n               convert: function (x) { return (x[12] - 32768) / 10; },\n               unit: \u0027\u00b0\u0027},\n              {name: \u0027y_orientation_angle\u0027,\n               displayName: \u0027Y orientation angle\u0027,\n               convert: function (x) { return (x[13] - 32768) / 10; },\n               unit: \u0027\u00b0\u0027},\n              {name: \u0027compass_heading\u0027,\n               displayName: \u0027Compass heading\u0027,\n               convert: function (x) { return x[14] - 32768; },\n               unit: \u0027\u00b0\u0027},\n              {name: \u0027north_wind_speed\u0027,\n               displayName: \u0027North wind speed\u0027,\n               convert: function (x) { return (x[15] - 32768) / 100; },\n               unit: \u0027m\u22c5s\u207b\u00b9\u0027},\n              {name: \u0027east_wind_speed\u0027,\n               displayName: \u0027East wind speed\u0027,\n               convert: function (x) { return (x[16] - 32768) / 100; },\n               unit: \u0027m\u22c5s\u207b\u00b9\u0027}]},\n    {length: 1,\n     values: [{name: \u0027battery_voltage\u0027,\n               displayName: \u0027Battery voltage\u0027,\n               convert: function (x) { return x[0] / 1000; },\n               unit: \u0027V\u0027}]}\n  ],\n\n  read_int: function (bytes, pos) {\n    return (bytes[pos] \u003c\u003c 8) + bytes[pos + 1];\n  },\n\n  decode: function (msg) {\n    var bytes = msg;\n    var i, j;\n    if (typeof msg === \u0027string\u0027) {\n      bytes = [];\n      for (i = 0; i \u003c msg.length; i += 2) {\n        bytes.push(parseInt(msg.substring(i, i + 2), 16));\n      }\n    }\n\n    var version = bytes[0];\n    if (version != this.PROTOCOL_VERSION) {\n      return {error: \"protocol version \" + version + \" doesn\u0027t match v2\"};\n    }\n\n    var deviceId = this.read_int(bytes, 1);\n    var flags = this.read_int(bytes, 3);\n    var result = {\u0027protocol_version\u0027: version, \u0027device_id\u0027: deviceId};\n    // decode payload\n    var pos = 5;\n    for (i = 0; i \u003c this.SENSORS.length; i++, flags \u003e\u003e= 1) {\n      if ((flags \u0026 1) !== 1)\n        continue;\n\n      var sensor = this.SENSORS[i];\n      var x = [];\n      // convert data to 16-bit integer array\n      for (j = 0; j \u003c sensor.length; j++) {\n        x.push(this.read_int(bytes, pos));\n        pos += 2;\n      }\n\n      // decode sensor values\n      for (j = 0; j \u003c sensor.values.length; j++) {\n        var value = sensor.values[j];\n        if (\u0027convert\u0027 in value) {\n          result[value.name] = {displayName: value.displayName,\n                                value: value.convert.bind(this)(x)};\n          if (\u0027unit\u0027 in value)\n            result[value.name][\u0027unit\u0027] = value.unit;\n        }\n      }\n    }\n    return result;\n  }\n};\n\nfunction parsePayload(payload) {\n  var decoded = decentlab_decoder.decode(payload);\n  Object.keys(decoded).map(function(key, index) { decoded[key] = decoded[key][\u0027value\u0027];});\n  return decoded;\n}",
  "sensors": [
    {
      "name": "solar_radiation",
      "displayName": "Solar radiation /W⋅m⁻²/",
      "type": "float"
    },
    {
      "name": "precipitation",
      "displayName": "Precipitation /mm/",
      "type": "float"
    },
    {
      "name": "lightning_strike_count",
      "displayName": "Lightning strike count",
      "type": "int"
    },
    {
      "name": "lightning_average_distance",
      "displayName": "Lightning average distance",
      "type": "kilometers"
    },
    {
      "name": "wind_speed",
      "displayName": "Wind speed /m⋅s⁻¹/",
      "type": "float"
    },
    {
      "name": "wind_direction",
      "displayName": "Wind direction",
      "type": "angle"
    },
    {
      "name": "maximum_wind_speed",
      "displayName": "Maximum wind speed /m⋅s⁻¹/",
      "type": "float"
    },
    {
      "name": "air_temperature",
      "displayName": "Air temperature",
      "type": "tempC"
    },
    {
      "name": "vapor_pressure",
      "displayName": "Vapor pressure",
      "type": "kPa"
    },
    {
      "name": "atmospheric_pressure",
      "displayName": "Atmospheric pressure",
      "type": "kPa"
    },
    {
      "name": "relative_humidity",
      "displayName": "Relative humidity",
      "type": "relativeHumidity"
    },
    {
      "name": "sensor_temperature_internal",
      "displayName": "Sensor temperature internal",
      "type": "tempC"
    },
    {
      "name": "x_orientation_angle",
      "displayName": "X orientation angle",
      "type": "angle"
    },
    {
      "name": "y_orientation_angle",
      "displayName": "Y orientation angle",
      "type": "angle"
    },
    {
      "name": "compass_heading",
      "displayName": "Compass heading",
      "type": "angle"
    },
    {
      "name": "north_wind_speed",
      "displayName": "North wind speed /m⋅s⁻¹/",
      "type": "float"
    },
    {
      "name": "east_wind_speed",
      "displayName": "East wind speed /m⋅s⁻¹/",
      "type": "float"
    },
    {
      "displayName": "Battery voltage",
      "name": "battery_voltage",
      "thresholds": [
        {
          "name": "Battery voltage is low",
          "type": "lessthan",
          "warning": "2.2"
        }
      ],
      "type": "volts"
    }
  ],
  "updatedUTC": "2020-05-29T18:06:30.651Z",
  "version": "v1.0"
}