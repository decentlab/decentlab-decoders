{
  "createdUTC": "2020-05-29T18:06:30.651Z",
  "definitionIsPublic": false,
  "definitionName": "DL-IAM",
  "displayName": "DL-IAM Indoor Ambiance Monitor including CO\u2082, TVOC and Motion Sensor for LoRaWAN\u00ae",
  "manufacturer": "Decentlab",
  "organizationId": "9f014719-4add-4989-ba0f-fc7edc44d893",
  "parser": "\n/* https://www.decentlab.com/products/indoor-ambiance-monitor-including-co2-tvoc-and-motion-sensor-for-lorawan */\n\nvar decentlab_decoder = {\n  PROTOCOL_VERSION: 2,\n  SENSORS: [\n    {length: 1,\n     values: [{name: \u0027battery_voltage\u0027,\n               displayName: \u0027Battery voltage\u0027,\n               convert: function (x) { return x[0] / 1000; },\n               unit: \u0027V\u0027}]},\n    {length: 2,\n     values: [{name: \u0027air_temperature\u0027,\n               displayName: \u0027Air temperature\u0027,\n               convert: function (x) { return 175 * x[0] / 65535 - 45; },\n               unit: \u0027\u00b0C\u0027},\n              {name: \u0027air_humidity\u0027,\n               displayName: \u0027Air humidity\u0027,\n               convert: function (x) { return 100 * x[1] / 65535; },\n               unit: \u0027%\u0027}]},\n    {length: 1,\n     values: [{name: \u0027barometric_pressure\u0027,\n               displayName: \u0027Barometric pressure\u0027,\n               convert: function (x) { return x[0] * 2; },\n               unit: \u0027Pa\u0027}]},\n    {length: 2,\n     values: [{name: \u0027ambient_light_visible_infrared\u0027,\n               displayName: \u0027Ambient light (visible + infrared)\u0027,\n               convert: function (x) { return x[0]; }},\n              {name: \u0027ambient_light_infrared\u0027,\n               displayName: \u0027Ambient light (infrared)\u0027,\n               convert: function (x) { return x[1]; }},\n              {name: \u0027illuminance\u0027,\n               displayName: \u0027Illuminance\u0027,\n               convert: function (x) { return Math.max(Math.max(1.0 * x[0] - 1.64 * x[1], 0.59 * x[0] - 0.86 * x[1]), 0) * 1.5504; },\n               unit: \u0027lx\u0027}]},\n    {length: 3,\n     values: [{name: \u0027co2_concentration\u0027,\n               displayName: \u0027CO2 concentration\u0027,\n               convert: function (x) { return x[0] - 32768; },\n               unit: \u0027ppm\u0027},\n              {name: \u0027co2_sensor_status\u0027,\n               displayName: \u0027CO2 sensor status\u0027,\n               convert: function (x) { return x[1]; }},\n              {name: \u0027raw_ir_reading\u0027,\n               displayName: \u0027Raw IR reading\u0027,\n               convert: function (x) { return x[2]; }}]},\n    {length: 1,\n     values: [{name: \u0027activity_counter\u0027,\n               displayName: \u0027Activity counter\u0027,\n               convert: function (x) { return x[0]; }}]},\n    {length: 1,\n     values: [{name: \u0027total_voc\u0027,\n               displayName: \u0027Total VOC\u0027,\n               convert: function (x) { return x[0]; },\n               unit: \u0027ppb\u0027}]}\n  ],\n\n  read_int: function (bytes, pos) {\n    return (bytes[pos] \u003c\u003c 8) + bytes[pos + 1];\n  },\n\n  decode: function (msg) {\n    var bytes = msg;\n    var i, j;\n    if (typeof msg === \u0027string\u0027) {\n      bytes = [];\n      for (i = 0; i \u003c msg.length; i += 2) {\n        bytes.push(parseInt(msg.substring(i, i + 2), 16));\n      }\n    }\n\n    var version = bytes[0];\n    if (version != this.PROTOCOL_VERSION) {\n      return {error: \"protocol version \" + version + \" doesn\u0027t match v2\"};\n    }\n\n    var deviceId = this.read_int(bytes, 1);\n    var flags = this.read_int(bytes, 3);\n    var result = {\u0027protocol_version\u0027: version, \u0027device_id\u0027: deviceId};\n    // decode payload\n    var pos = 5;\n    for (i = 0; i \u003c this.SENSORS.length; i++, flags \u003e\u003e= 1) {\n      if ((flags \u0026 1) !== 1)\n        continue;\n\n      var sensor = this.SENSORS[i];\n      var x = [];\n      // convert data to 16-bit integer array\n      for (j = 0; j \u003c sensor.length; j++) {\n        x.push(this.read_int(bytes, pos));\n        pos += 2;\n      }\n\n      // decode sensor values\n      for (j = 0; j \u003c sensor.values.length; j++) {\n        var value = sensor.values[j];\n        if (\u0027convert\u0027 in value) {\n          result[value.name] = {displayName: value.displayName,\n                                value: value.convert.bind(this)(x)};\n          if (\u0027unit\u0027 in value)\n            result[value.name][\u0027unit\u0027] = value.unit;\n        }\n      }\n    }\n    return result;\n  }\n};\n\nfunction parsePayload(payload) {\n  var decoded = decentlab_decoder.decode(payload);\n  Object.keys(decoded).map(function(key, index) { decoded[key] = decoded[key][\u0027value\u0027];});\n  return decoded;\n}",
  "sensors": [
    {
      "displayName": "Battery voltage",
      "name": "battery_voltage",
      "thresholds": [
        {
          "name": "Battery voltage is low",
          "type": "lessthan",
          "warning": "2.2"
        }
      ],
      "type": "volts"
    },
    {
      "name": "air_temperature",
      "displayName": "Air temperature",
      "type": "tempC"
    },
    {
      "name": "air_humidity",
      "displayName": "Air humidity",
      "type": "relativeHumidity"
    },
    {
      "name": "barometric_pressure",
      "displayName": "Barometric pressure",
      "scale": 0.001, "type": "kPa"
    },
    {
      "name": "ambient_light_visible_infrared",
      "displayName": "Ambient light visible + infrared",
      "type": "int"
    },
    {
      "name": "ambient_light_infrared",
      "displayName": "Ambient light infrared",
      "type": "int"
    },
    {
      "name": "illuminance",
      "displayName": "Illuminance",
      "type": "lux"
    },
    {
      "name": "co2_concentration",
      "displayName": "CO2 concentration",
      "type": "ppm"
    },
    {
      "name": "co2_sensor_status",
      "displayName": "CO2 sensor status",
      "type": "int"
    },
    {
      "name": "raw_ir_reading",
      "displayName": "Raw IR reading",
      "type": "int"
    },
    {
      "name": "activity_counter",
      "displayName": "Activity counter",
      "type": "int"
    },
    {
      "name": "total_voc",
      "displayName": "Total VOC /ppb/",
      "type": "float"
    }
  ],
  "updatedUTC": "2020-05-29T18:06:30.651Z",
  "version": "v1.0"
}